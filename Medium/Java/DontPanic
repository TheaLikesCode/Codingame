import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        int nbFloors = in.nextInt(); // number of floors
        int width = in.nextInt(); // width of the area
        int nbRounds = in.nextInt(); // maximum number of rounds
        int exitFloor = in.nextInt(); // floor on which the exit is found
        int exitPos = in.nextInt(); // position of the exit on its floor
        int nbTotalClones = in.nextInt(); // number of generated clones
        int nbAdditionalElevators = in.nextInt(); // ignore (always zero)
        int nbElevators = in.nextInt(); // number of elevators
        
        int[] exits = new int[nbFloors];
        exits[exitFloor] = exitPos;
        
        final String WAIT   = "WAIT";
        final String BLOCK  = "BLOCK";
        final String LEFT   = "LEFT";
        final String RIGHT  = "RIGHT";
        
        String output = WAIT;
        
        
        for (int i = 0; i < nbElevators; i++) {
            int elevatorFloor = in.nextInt(); // floor on which this elevator is found
            int elevatorPos = in.nextInt(); // position of the elevator on its floor
            
            exits[elevatorFloor] = elevatorPos;
        }

        // game loop
        while (true) {
           //  output = WAIT;
            int cloneFloor = in.nextInt(); // floor of the leading clone
            int clonePos = in.nextInt(); // position of the leading clone on its floor
            String direction = in.next(); // direction of the leading clone: LEFT or RIGHT
            
            if(cloneFloor!=-1){
                int distanceToExit = exits[cloneFloor] - clonePos;
                output = direction.equals(RIGHT) == (distanceToExit < 0)  && distanceToExit != 0 ? BLOCK : WAIT;
                
            /*Line 50 is a rewrite of the following lines, because DRY (Don't repeat yourself).
                if(distanceToExit < 0) output = direction.equals(LEFT) ? WAIT : BLOCK;
               else if (distanceToExit > 0) output = direction.equals(LEFT) ? BLOCK : WAIT;
          */
            }

            System.out.println(output); // action: WAIT or BLOCK
        }
    }
}